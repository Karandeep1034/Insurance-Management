/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.karandeep.el_seguro;

import com.karandeep.el_seguro.dao.Policydao;
import com.karandeep.el_seguro.dto.Policy;
import com.karandeep.el_seguro.utils.Utility;
import java.beans.PropertyVetoException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;

/**
 *
 * @author 91701
 */
public class PolicyInputScreen extends javax.swing.JInternalFrame {

    /**
     * Creates new form PolicyDetails
     */
    String action;
    private JDesktopPane jDesktopPane1;
    public PolicyInputScreen() {
        initComponents();
    }

    public PolicyInputScreen(String action, JDesktopPane deskPane) {
        this();
        this.action=action;
        this.jDesktopPane1=deskPane;
        
            
            jLabel1.setVisible(true);
            Submit.setText("Search");
        
        
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Submit = new javax.swing.JButton();

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel1.setText("Policy No. :");

        Submit.setText("Submit");
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel1)
                        .addGap(50, 50, 50)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(Submit)))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Submit)
                .addContainerGap(205, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//take input and tell surrender value,policy statur or revival
    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitActionPerformed
        String policyNo = jTextField1.getText().trim();
        if(Utility.isEmpty(policyNo)){
            JOptionPane.showMessageDialog(this,"Invalid Input");
        }
        else{
             Policy policy = new Policydao().getPolicy(Integer.parseInt(policyNo));
                if(policy==null)
                {
                    JOptionPane.showMessageDialog(this,"Invalid Input");
                }
                else{
                    PolicyDetails status = new PolicyDetails(action,policy);
                    status.setVisible(true);
                    jDesktopPane1.add(status);
                    try {
                        status.setSelected(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(PolicyInputScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            /*if(action.equals("Status")){
                Policy policy = new Policydao().getPolicy(Integer.parseInt(policyNo));
                if(policy==null)
                {
                    JOptionPane.showMessageDialog(this,"Invalid Input");
                }
                else{
                    PolicyDetails status = new PolicyDetails("Status",policy);
                    status.setVisible(true);
                    jDesktopPane1.add(status);
                    try {
                        status.setSelected(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(PolicyInputScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            if(action.equals("Surrender")){
                Policy policy = new Policydao().getPolicy(Integer.parseInt(policyNo));
                if(policy==null)
                {
                    JOptionPane.showMessageDialog(this,"Invalid Input");
                }
                else{
                    PolicyDetails status = new PolicyDetails("Surrender",policy);
                    status.setVisible(true);
                    jDesktopPane1.add(status);
                    try {
                        status.setSelected(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(PolicyInputScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            if(action.equals("CashierSurrender")){
                Policy policy = new Policydao().getPolicy(Integer.parseInt(policyNo));
                if(policy==null)
                {
                    JOptionPane.showMessageDialog(this,"Invalid Input");
                }
                else{
                    PolicyDetails status = new PolicyDetails(action,policy);
                    status.setVisible(true);
                    jDesktopPane1.add(status);
                    try {
                        status.setSelected(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(PolicyInputScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            if(action.equals("Revival")){
                Policy policy = new Policydao().getPolicy(Integer.parseInt(policyNo));
                if(policy==null)
                {
                    JOptionPane.showMessageDialog(this,"Invalid Input");
                }
                else{
                    PolicyDetails status = new PolicyDetails("Revival",policy);
                    status.setVisible(true);
                    jDesktopPane1.add(status);
                    try {
                        status.setSelected(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(PolicyInputScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            if(action.equals("CashierRevival")){
                Policy policy = new Policydao().getPolicy(Integer.parseInt(policyNo));
                if(policy==null)
                {
                    JOptionPane.showMessageDialog(this,"Invalid Input");
                }
                else{
                    PolicyDetails status = new PolicyDetails(action,policy);
                    status.setVisible(true);
                    jDesktopPane1.add(status);
                    try {
                        status.setSelected(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(PolicyInputScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }*/
        }
    }//GEN-LAST:event_SubmitActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1KeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Submit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
